'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a5eebba2.js');

const neftifyInputCss = ":host{--neftify-input-padding:0.5rem 1rem}:host{display:inline-block;box-sizing:border-box}:host .neftify-input{font-size:14px;box-sizing:border-box;display:flex;flex-direction:row;align-items:center;padding:var(--neftify-input-padding);background:#ffffff;border:1px solid #e5e7eb;border-radius:12px;width:100%}:host .neftify-input-size-large{--neftify-input-padding:1rem 1.125rem}:host .neftify-input-size-medium{--neftify-input-padding:0.75rem}:host .neftify-input-size-normal{--neftify-input-padding:0.875rem 0.75rem}:host .neftify-input-size-small{--neftify-input-padding:0.5rem 1rem}:host .neftify-input-static{border:none;background:none;box-shadow:none;padding-inline:6px;border-radius:0.375rem}";

const NeftifyInput = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.neftifyBlur = index.createEvent(this, "neftifyBlur", 7);
    this.neftifyFocus = index.createEvent(this, "neftifyFocus", 7);
    this.neftifyChange = index.createEvent(this, "neftifyChange", 7);
    this.neftifyInput = index.createEvent(this, "neftifyInput", 7);
    this.neftifyKeyDown = index.createEvent(this, "neftifyKeyDown", 7);
    this.neftifyKeyUp = index.createEvent(this, "neftifyKeyUp", 7);
    // ========================== PROPS ==========================
    /**
     * Value
     */
    this.value = "";
    /**
     * Type
     */
    this.type = "text";
    /**
     * Size
     */
    this.size = "normal";
    /**
     * The name of the control, which is submitted with the form data.
     */
    this.name = "";
    /**
     * Set if the user must fill in a value before submitting a form. Input state must be set back after.
     */
    this.required = false;
    /**
     * The input will look similar to a normal one, but is not editable
     */
    this.readonly = false;
    /**
     * Removes the background, border, shadow, and horizontal padding
     */
    this.isStatic = false;
    /**
     * Set if the element will have its spelling and grammar checked.
     */
    this.spellcheck = false;
    /**
     * Set if the user cannot interact with the input.
     */
    this.disabled = false;
    // ========================== EVENT HANDLERS ==========================
    this.onBlur = e => {
      this.neftifyBlur.emit();
      this.value = e.target.value;
    };
    this.onFocus = e => {
      this.neftifyFocus.emit();
      this.value = e.target.value;
    };
    this.onKeyDown = e => {
      this.neftifyKeyDown.emit();
      this.value = e.target.value;
    };
    this.onKeyUp = e => {
      this.neftifyKeyUp.emit();
      this.value = e.target.value;
    };
    this.onInput = e => {
      this.neftifyInput.emit();
      this.value = e.target.value;
    };
    this.onChange = e => {
      this.neftifyChange.emit();
      this.value = e.target.value;
    };
  }
  // ========================== RENDER ==========================
  render() {
    const baseClassName = "neftify-input";
    return (index.h(index.Host, null, index.h("input", { class: {
        [baseClassName]: true,
        [`${baseClassName}-size-${this.size}`]: Boolean(this.size),
        [`${baseClassName}-static`]: this.isStatic
      }, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, name: this.name, pattern: this.pattern, placeholder: this.placeholder, readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck ? "true" : "false", step: this.step, type: this.type, value: this.value, onInput: this.onInput, onBlur: this.onBlur, onChange: this.onChange, onFocus: this.onFocus, onKeyDown: this.onKeyDown, onKeyUp: this.onKeyUp })));
  }
  get el() { return index.getElement(this); }
};
NeftifyInput.style = neftifyInputCss;

exports.neftify_input = NeftifyInput;
