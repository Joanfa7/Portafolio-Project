import { proxyCustomElement, HTMLElement, createEvent, h, Host, Fragment } from '@stencil/core/internal/client';
import { d as defineCustomElement$1 } from './neftify-button2.js';

// ========== SCROLLING ==========
// left: 37, up: 38, right: 39, down: 40,
// spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
const keys = { 37: 1, 38: 1, 39: 1, 40: 1 };
const preventDefault = e => e.preventDefault();
const preventDefaultForScrollKeys = e => {
  if (keys[e.keyCode]) {
    preventDefault(e);
    return false;
  }
};
// modern Chrome requires { passive: false } when adding event
let supportsPassive = false;
try {
  window.addEventListener("test", null, Object.defineProperty({}, "passive", {
    get() {
      supportsPassive = true;
    }
  }));
}
catch (e) { }
const wheelOpt = supportsPassive ? { passive: false } : false;
// call this to Disable
const disableScroll = wheelEvent => {
  window.addEventListener("DOMMouseScroll", preventDefault, false); // older FF
  window.addEventListener(wheelEvent, preventDefault, wheelOpt); // modern desktop
  window.addEventListener("touchmove", preventDefault, wheelOpt); // mobile
  window.addEventListener("keydown", preventDefaultForScrollKeys, false);
};
// call this to Enable
const enableScroll = wheelEvent => {
  window.removeEventListener("DOMMouseScroll", preventDefault, false);
  window.removeEventListener(wheelEvent, preventDefault, wheelOpt);
  window.removeEventListener("touchmove", preventDefault, wheelOpt);
  window.removeEventListener("keydown", preventDefaultForScrollKeys, false);
};

const neftifyModalCss = ":host{--neftify-modal-padding:1.25rem;--neftify-modal-background:white}:host(.wrapper){position:fixed;left:0;top:0;width:100%;height:100%;background-color:rgba(0, 0, 0, 0.25);opacity:0;visibility:hidden;transform:scale(1.1);transition:visibility 0s linear 0.25s, opacity 0.25s 0s, transform 0.25s, display 0.25s 0.25s;z-index:var(--neftify-modal-z-index, 9)}:host(.wrapper) .modal{min-width:319px;font-family:Helvetica;font-size:14px;padding:var(--neftify-modal-padding);background-color:var(--neftify-modal-background);position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);border-radius:var(--neftify-modal-radius, 1.3125rem);max-width:var(--neftify-modal-max-width);box-shadow:0px 4px 24px rgba(0, 0, 0, 0.15);overflow:hidden}:host(.wrapper) .modal .title{font-size:18px}:host(.wrapper) .modal .button-container{display:flex;justify-content:flex-end;width:100%;gap:0.5rem}:host(.hidden){display:none}:host(.visible){opacity:1;visibility:visible;transform:scale(1);transition:visibility 0s linear 0s, opacity 0.25s 0s, transform 0.25s}";

const NeftifyModal = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.ok = createEvent(this, "ok", 7);
    this.cancel = createEvent(this, "cancel", 7);
    // ================== GLOBALS ==================
    this.hasButtonsSlot = false;
    this.scrollableEl = "onwheel" in document.createElement("div")
      ? "wheel"
      : "mousewheel";
    /**
     * Determines if the modal should be visible
     */
    this.isVisible = false;
    /**
     * Allows dismissing the modal by clicking on the backdrop
     */
    this.dismissOnBackdropClick = false;
    // ------ HANDLERS ------
    /**
     * Handles a click on the default cancel button, hides the modal and emmits the event.
     */
    this.handleCancelClick = () => {
      this.hideModal();
      this.cancel.emit();
    };
    /**
     * Handles a click on the default OK button, hides the modal and emmits the event.
     */
    this.handleOkClick = () => {
      this.hideModal();
      this.ok.emit();
    };
    /**
     * Handles a click on the backdrop, hides the modal and emmits the event.
     * @return {void | null}
     */
    this.handleBackdropClick = () => this.dismissOnBackdropClick ? this.hideModal() : null;
    /**
    * Handles a click on the modal element. Prevents triggering the click event on the parent `.wrapper` element
    * @param {event} ev Html Event
    * @return {void}
   */
    this.handleModalClick = ev => ev.stopPropagation();
  }
  // ================== LIFECYCLE METHODS ==================
  componentWillLoad() {
    // Checking if a buttons slot has been passed into the component
    this.hasButtonsSlot = !!this.el.querySelector('[slot="buttons"]');
  }
  componentDidLoad() {
    this.isVisible ? this.showModal() : null;
  }
  // ================== GENERAL METHODS ==================
  handleVisibility() {
    this.isVisible ? this.showModal() : this.hideModal();
  }
  /**
   * Hides the modal component
   */
  async hideModal() {
    this.isVisible = false;
    setTimeout(() => {
      enableScroll(this.scrollableEl);
      this.el.classList.add("hidden");
    }, 250);
  }
  /**
   * Shows the modal component and disables scroll
   */
  async showModal() {
    this.isVisible = true;
    disableScroll(this.scrollableEl);
    this.el.classList.remove("hidden");
  }
  // ================== RENDER COMPONENT ==================
  render() {
    return (h(Host, { class: {
        wrapper: true,
        visible: this.isVisible,
        hidden: true
      }, onClick: this.handleBackdropClick }, h("div", { class: "modal", onClick: this.handleModalClick }, this.heading
      ? h("span", { class: "title" }, this.heading)
      : "", h("div", { class: "content" }, h("slot", null)), h("div", { class: "button-container" }, this.hasButtonsSlot
      ? ""
      : h(Fragment, null, h("neftify-button", { class: "cancel", onClick: this.handleCancelClick }, "Cancel"), h("neftify-button", { class: "ok", onClick: this.handleOkClick }, "Okay")), h("slot", { name: "buttons" })))));
  }
  get el() { return this; }
  static get watchers() { return {
    "isVisible": ["handleVisibility"]
  }; }
  static get style() { return neftifyModalCss; }
}, [1, "neftify-modal", {
    "heading": [1],
    "isVisible": [1540, "is-visible"],
    "dismissOnBackdropClick": [4, "dismiss-on-backdrop-click"],
    "hideModal": [64],
    "showModal": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["neftify-modal", "neftify-button"];
  components.forEach(tagName => { switch (tagName) {
    case "neftify-modal":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, NeftifyModal);
      }
      break;
    case "neftify-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { NeftifyModal as N, defineCustomElement as d };
