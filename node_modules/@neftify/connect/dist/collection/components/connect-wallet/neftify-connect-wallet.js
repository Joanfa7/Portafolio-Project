import { Component, Host, h, Element, Event, State, Method, Listen, Prop } from "@stencil/core";
import { ethers } from "ethers";
import { closeIcon, neftifyIcon, metamaskLogo, walletConnectLogo } from "./neftify-connect-wallet.templates";
import { connectAccount } from "./neftify-connect";
import { formatAddress } from "./neftify-connect-wallet.utils";
import { connectWithMetamask } from "../../utils/providers/metamask";
export class NeftifyConnectWallet {
  constructor() {
    // ========================== GLOBALS ==========================
    // List of third party wallet providers
    this.providers = [
      {
        name: "Metamask",
        id: "metamask",
        logo: metamaskLogo()
      },
      {
        name: "Wallet Connect",
        id: "walletconnect",
        logo: walletConnectLogo()
      }
    ];
    // ------ STATE ------
    this.connectionDetails = {
      address: null,
      balance: null,
      networkId: null,
      provider: null
    };
    /** Used for managing the UI of the connect button */
    this.hasConnected = false;
    // ------ PROPS ------
    /** Shows the emoji of the connected button */
    this.showEmoji = false;
    /** Hides the neftify button and modal components */
    this.isHidden = false;
    /** Prevents the modal from opening up, the connect button gets triggered via custom connection on `neftifyConnectButtonClick` */
    this.noModal = false;
    /** Enables the dark-mode theme */
    this.isDark = false;
    // -------- GENERAL METHODS ------
    /**
     * Hides the connection modal
     * @return {void}
     * */
    this.closeModal = () => this.modalEl.hideModal();
    /**
     * Saves the connection details to local storage for future interactions.
     * @param {IconnectionDetails} connectionDetails
     * @param {string} selectedWalletProvider
     */
    this.setStorageData = (connectionDetails, selectedWalletProvider) => {
      const { address, networkId, balance } = connectionDetails;
      const connection = {
        address,
        networkId,
        selectedWalletProvider,
        balance
      };
      localStorage.neftifyconnect = JSON.stringify(connection);
    };
    /**
     * Gets the connection details from local storage
     * @return {Object}
     */
    this.getStorageData = () => JSON.parse(localStorage.neftifyconnect);
    /**
     * Clears the connection details from local storage
     * @return {void}
     */
    this.clearConnectionData = () => localStorage.clear();
    /**
     * Used to set connection details using local storage as reference
     * @return {void}
     */
    this.setConnectionDetails = async () => {
      try {
        this.connectionDetails = await connectAccount(this.getStorageData().selectedWalletProvider);
      }
      catch (err) {
        console.error("[neftify-connect]: having trouble reconnecting");
      }
    };
  }
  onEscPress(event) {
    if (event.code === "Escape")
      this.closeModal();
  }
  /**
   * Handles the user connection and stores the connection details on local storage.
   * @param {IconnectionDetails} response
   * @param {string} selectedWalletProvider
   * @return {void}
   * */
  handleUserConnect(response, selectedWalletProvider) {
    this.hasConnected = true;
    this.modalEl.hideModal();
    this.setStorageData(response, selectedWalletProvider);
    this.neftifyUserHasConnected.emit(response);
  }
  // -------- COMPONENT METHODS ------
  async getConnectionDetails() {
    return this.connectionDetails;
  }
  /**
   * Helper method allowing to execute a manual wallet connection
   * @param {`metamask` | `walletconnect`} provider The provider to connect with `metamask` | `walletconnect`
   */
  async connect(provider) {
    if (provider === "metamask") {
      const connection = await connectWithMetamask();
      this.connectionDetails = connection;
      this.hasConnected = true;
      this.handleUserConnect(connection, provider);
      this.closeModal();
      return;
    }
    try {
      const connection = await connectAccount(provider);
      this.connectionDetails = connection;
      this.hasConnected = true;
      this.handleUserConnect(connection, provider);
      this.closeModal();
    }
    catch (error) {
      console.error("[error]", error);
    }
  }
  /**
   * Helper method allowing to execute a manual wallet disconnection
   */
  async disconnect() {
    this.hasConnected = false;
    this.clearConnectionData();
    this.connectionDetails = {
      address: null,
      balance: null,
      networkId: null,
      provider: null
    };
    this.neftifyUserHasDisconnected.emit();
  }
  /**
   * Helper method to get the user's balance in wei
   */
  async getBalance() {
    const { provider, address } = this.connectionDetails;
    const balanceInWei = (+await provider.getBalance(address)).toLocaleString("fullwide", { useGrouping: false });
    const balanceInEth = ethers.utils.formatEther(balanceInWei);
    return { wei: balanceInWei, eth: balanceInEth };
  }
  /**
   * Helper method to get the contract signer
   */
  async getSigner() {
    return this.connectionDetails.provider.getSigner();
  }
  /**
   * Helper method to get the user's connection state.
   * @return {boolean} Returns `true` if user is connected, otherwise returns `false`.
   */
  async userIsConnected() {
    return localStorage.neftifyconnect !== undefined;
  }
  async componentWillLoad() {
    if (localStorage.neftifyconnect !== undefined) {
      this.setConnectionDetails();
      this.hasConnected = true;
      this.neftifyUserHasConnected.emit(this.getStorageData());
    }
    else {
      this.neftifyUserHasDisconnected.emit();
    }
  }
  // -------- RENDER --------
  render() {
    return (h(Host, { class: {
        "neftify-connect-is-hidden": this.isHidden,
        "neftify-connect-dark-mode": this.isDark
      } },
      h("neftify-modal", { class: "neftify-connect-modal", ref: el => (this.modalEl = el) },
        h("div", { class: "neftify-connect-modal-header" },
          h("neftify-button", { onClick: () => this.closeModal() }, closeIcon())),
        h("div", { class: "neftify-connect-modal-content" },
          h("h2", null, "Connect with a wallet"),
          h("div", { class: "neftify-wallet-provider-container" }, this.providers.map(({ name, id, logo }) => h("div", { key: id, class: "neftify-wallet-provider-wrapper" },
            h("button", { onClick: () => {
                this.connect(id);
              }, class: "neftify-wallet-provider-button" }, logo),
            h("span", null, name))))),
        h("div", { slot: "buttons", class: "neftify-connect-modal-footer" },
          h("a", { href: "http://neftify.com/", "aria-label": "Neftify main website" }, neftifyIcon()))),
      !this.hasConnected
        ? h("neftify-button", { class: "neftify-connect-wallet-button", ref: el => (this.buttonEl = el), onClick: () => {
            if (this.noModal) {
              this.neftifyConnectButtonClick.emit();
              return;
            }
            this.modalEl.showModal();
          } }, "Connect wallet")
        : h("div", { class: "neftify-disconnect-wallet-container" },
          h("div", { class: "neftify-disconnect-wallet-address" },
            this.showEmoji && h("div", { class: "emoji" }, "\uD83D\uDE00"),
            formatAddress(this.connectionDetails.address)),
          h("neftify-button", { class: "neftify-disconnect-wallet-button", onClick: () => {
              this.neftifyDisconnectButtonClick.emit();
              this.disconnect();
            } }, "Disconnect"))));
  }
  static get is() { return "neftify-connect-wallet"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["neftify-connect-wallet.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["neftify-connect-wallet.css"]
  }; }
  static get assetsDirs() { return ["../globals/images"]; }
  static get properties() { return {
    "showEmoji": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Shows the emoji of the connected button"
      },
      "attribute": "show-emoji",
      "reflect": false,
      "defaultValue": "false"
    },
    "isHidden": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Hides the neftify button and modal components"
      },
      "attribute": "is-hidden",
      "reflect": false,
      "defaultValue": "false"
    },
    "noModal": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Prevents the modal from opening up, the connect button gets triggered via custom connection on `neftifyConnectButtonClick`"
      },
      "attribute": "no-modal",
      "reflect": false,
      "defaultValue": "false"
    },
    "isDark": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Enables the dark-mode theme"
      },
      "attribute": "is-dark",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "connectionDetails": {},
    "hasConnected": {}
  }; }
  static get events() { return [{
      "method": "neftifyUserHasConnected",
      "name": "neftifyUserHasConnected",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Gets fired whenever the user has connected their wallet"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "neftifyConnectButtonClick",
      "name": "neftifyConnectButtonClick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Gets fired whenever the user has clicked on the connect button"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "neftifyDisconnectButtonClick",
      "name": "neftifyDisconnectButtonClick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Gets fired whenever the user has clicked on the disconnect button"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "neftifyUserHasDisconnected",
      "name": "neftifyUserHasDisconnected",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Gets fired whenever the user has disconnected their wallet"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "getConnectionDetails": {
      "complexType": {
        "signature": "() => Promise<IconnectionDetails>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "IconnectionDetails": {
            "location": "import",
            "path": "./connect-wallet.types"
          }
        },
        "return": "Promise<IconnectionDetails>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "connect": {
      "complexType": {
        "signature": "(provider: any) => Promise<void>",
        "parameters": [{
            "tags": [{
                "name": "param",
                "text": "provider The provider to connect with `metamask` | `walletconnect`"
              }],
            "text": "The provider to connect with `metamask` | `walletconnect`"
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Helper method allowing to execute a manual wallet connection",
        "tags": [{
            "name": "param",
            "text": "provider The provider to connect with `metamask` | `walletconnect`"
          }]
      }
    },
    "disconnect": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Helper method allowing to execute a manual wallet disconnection",
        "tags": []
      }
    },
    "getBalance": {
      "complexType": {
        "signature": "() => Promise<{ wei: string; eth: string; }>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<{ wei: string; eth: string; }>"
      },
      "docs": {
        "text": "Helper method to get the user's balance in wei",
        "tags": []
      }
    },
    "getSigner": {
      "complexType": {
        "signature": "() => Promise<any>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<any>"
      },
      "docs": {
        "text": "Helper method to get the contract signer",
        "tags": []
      }
    },
    "userIsConnected": {
      "complexType": {
        "signature": "() => Promise<boolean>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<boolean>"
      },
      "docs": {
        "text": "Helper method to get the user's connection state.",
        "tags": [{
            "name": "return",
            "text": "Returns `true` if user is connected, otherwise returns `false`."
          }]
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "keyup",
      "method": "onEscPress",
      "target": "window",
      "capture": false,
      "passive": false
    }]; }
}
