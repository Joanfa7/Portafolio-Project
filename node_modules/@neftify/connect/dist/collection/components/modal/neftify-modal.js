import { Component, h, Host, Event, Prop, Element, Watch, Fragment, Method } from "@stencil/core";
import { disableScroll, enableScroll } from "../../utils/utils";
/** @internal */
export class NeftifyModal {
  constructor() {
    // ================== GLOBALS ==================
    this.hasButtonsSlot = false;
    this.scrollableEl = "onwheel" in document.createElement("div")
      ? "wheel"
      : "mousewheel";
    /**
     * Determines if the modal should be visible
     */
    this.isVisible = false;
    /**
     * Allows dismissing the modal by clicking on the backdrop
     */
    this.dismissOnBackdropClick = false;
    // ------ HANDLERS ------
    /**
     * Handles a click on the default cancel button, hides the modal and emmits the event.
     */
    this.handleCancelClick = () => {
      this.hideModal();
      this.cancel.emit();
    };
    /**
     * Handles a click on the default OK button, hides the modal and emmits the event.
     */
    this.handleOkClick = () => {
      this.hideModal();
      this.ok.emit();
    };
    /**
     * Handles a click on the backdrop, hides the modal and emmits the event.
     * @return {void | null}
     */
    this.handleBackdropClick = () => this.dismissOnBackdropClick ? this.hideModal() : null;
    /**
    * Handles a click on the modal element. Prevents triggering the click event on the parent `.wrapper` element
    * @param {event} ev Html Event
    * @return {void}
   */
    this.handleModalClick = ev => ev.stopPropagation();
  }
  // ================== LIFECYCLE METHODS ==================
  componentWillLoad() {
    // Checking if a buttons slot has been passed into the component
    this.hasButtonsSlot = !!this.el.querySelector('[slot="buttons"]');
  }
  componentDidLoad() {
    this.isVisible ? this.showModal() : null;
  }
  // ================== GENERAL METHODS ==================
  handleVisibility() {
    this.isVisible ? this.showModal() : this.hideModal();
  }
  /**
   * Hides the modal component
   */
  async hideModal() {
    this.isVisible = false;
    setTimeout(() => {
      enableScroll(this.scrollableEl);
      this.el.classList.add("hidden");
    }, 250);
  }
  /**
   * Shows the modal component and disables scroll
   */
  async showModal() {
    this.isVisible = true;
    disableScroll(this.scrollableEl);
    this.el.classList.remove("hidden");
  }
  // ================== RENDER COMPONENT ==================
  render() {
    return (h(Host, { class: {
        wrapper: true,
        visible: this.isVisible,
        hidden: true
      }, onClick: this.handleBackdropClick },
      h("div", { class: "modal", onClick: this.handleModalClick },
        this.heading
          ? h("span", { class: "title" }, this.heading)
          : "",
        h("div", { class: "content" },
          h("slot", null)),
        h("div", { class: "button-container" },
          this.hasButtonsSlot
            ? ""
            : h(Fragment, null,
              h("neftify-button", { class: "cancel", onClick: this.handleCancelClick }, "Cancel"),
              h("neftify-button", { class: "ok", onClick: this.handleOkClick }, "Okay")),
          h("slot", { name: "buttons" })))));
  }
  static get is() { return "neftify-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["neftify-modal.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["neftify-modal.css"]
  }; }
  static get properties() { return {
    "heading": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "heading",
      "reflect": false
    },
    "isVisible": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Determines if the modal should be visible"
      },
      "attribute": "is-visible",
      "reflect": true,
      "defaultValue": "false"
    },
    "dismissOnBackdropClick": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Allows dismissing the modal by clicking on the backdrop"
      },
      "attribute": "dismiss-on-backdrop-click",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get events() { return [{
      "method": "ok",
      "name": "ok",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Gets fired whenever the default ok button is clicked"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "cancel",
      "name": "cancel",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Gets fired whenever the default cancel button is clicked"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "hideModal": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Hides the modal component",
        "tags": []
      }
    },
    "showModal": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Shows the modal component and disables scroll",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "isVisible",
      "methodName": "handleVisibility"
    }]; }
}
