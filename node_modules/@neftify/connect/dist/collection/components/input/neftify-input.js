import { Component, Element, Host, Event, Prop, h } from "@stencil/core";
/** @internal */
export class NeftifyInput {
  constructor() {
    // ========================== PROPS ==========================
    /**
     * Value
     */
    this.value = "";
    /**
     * Type
     */
    this.type = "text";
    /**
     * Size
     */
    this.size = "normal";
    /**
     * The name of the control, which is submitted with the form data.
     */
    this.name = "";
    /**
     * Set if the user must fill in a value before submitting a form. Input state must be set back after.
     */
    this.required = false;
    /**
     * The input will look similar to a normal one, but is not editable
     */
    this.readonly = false;
    /**
     * Removes the background, border, shadow, and horizontal padding
     */
    this.isStatic = false;
    /**
     * Set if the element will have its spelling and grammar checked.
     */
    this.spellcheck = false;
    /**
     * Set if the user cannot interact with the input.
     */
    this.disabled = false;
    // ========================== EVENT HANDLERS ==========================
    this.onBlur = e => {
      this.neftifyBlur.emit();
      this.value = e.target.value;
    };
    this.onFocus = e => {
      this.neftifyFocus.emit();
      this.value = e.target.value;
    };
    this.onKeyDown = e => {
      this.neftifyKeyDown.emit();
      this.value = e.target.value;
    };
    this.onKeyUp = e => {
      this.neftifyKeyUp.emit();
      this.value = e.target.value;
    };
    this.onInput = e => {
      this.neftifyInput.emit();
      this.value = e.target.value;
    };
    this.onChange = e => {
      this.neftifyChange.emit();
      this.value = e.target.value;
    };
  }
  // ========================== RENDER ==========================
  render() {
    const baseClassName = "neftify-input";
    return (h(Host, null,
      h("input", { class: {
          [baseClassName]: true,
          [`${baseClassName}-size-${this.size}`]: Boolean(this.size),
          [`${baseClassName}-static`]: this.isStatic
        }, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, name: this.name, pattern: this.pattern, placeholder: this.placeholder, readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck ? "true" : "false", step: this.step, type: this.type, value: this.value, onInput: this.onInput, onBlur: this.onBlur, onChange: this.onChange, onFocus: this.onFocus, onKeyDown: this.onKeyDown, onKeyUp: this.onKeyUp })));
  }
  static get is() { return "neftify-input"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["neftify-input.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["neftify-input.css"]
  }; }
  static get properties() { return {
    "value": {
      "type": "any",
      "mutable": true,
      "complexType": {
        "original": "string | number",
        "resolved": "number | string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Value"
      },
      "attribute": "value",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"text\" | \"number\" | \"email\" | \"password\"",
        "resolved": "\"email\" | \"number\" | \"password\" | \"text\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Type"
      },
      "attribute": "type",
      "reflect": false,
      "defaultValue": "\"text\""
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"small\" | \"normal\" | \"medium\" | \"large\"",
        "resolved": "\"large\" | \"medium\" | \"normal\" | \"small\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Size"
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "\"normal\""
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The name of the control, which is submitted with the form data."
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "\"\""
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set if the user must fill in a value before submitting a form. Input state must be set back after."
      },
      "attribute": "required",
      "reflect": false,
      "defaultValue": "false"
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The input will look similar to a normal one, but is not editable"
      },
      "attribute": "readonly",
      "reflect": false,
      "defaultValue": "false"
    },
    "isStatic": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Removes the background, border, shadow, and horizontal padding"
      },
      "attribute": "is-static",
      "reflect": false,
      "defaultValue": "false"
    },
    "spellcheck": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set if the element will have its spelling and grammar checked."
      },
      "attribute": "spellcheck",
      "reflect": false,
      "defaultValue": "false"
    },
    "step": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Works with the min and max attributes to limit the increments at which a value can be set.\nPossible values are: `\"any\"` or a positive floating point number."
      },
      "attribute": "step",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set if the user cannot interact with the input."
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "inputmode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A hint to the browser for which keyboard to display.\nThis attribute applies when the value of the type attribute is `\"text\"`, `\"password\"`, `\"email\"`, or `\"url\"`.\nPossible values are: `\"verbatim\"`, `\"latin\"`, `\"latin-name\"`, `\"latin-prose\"`, `\"full-width-latin\"`, `\"kana\"`,\n`\"katakana\"`, `\"numeric\"`, `\"tel\"`, `\"email\"`, `\"url\"`."
      },
      "attribute": "inputmode",
      "reflect": false
    },
    "max": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The maximum value, which must not be less than its minimum (min attribute) value."
      },
      "attribute": "max",
      "reflect": false
    },
    "maxlength": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute\nspecifies the maximum number of characters that the user can enter."
      },
      "attribute": "maxlength",
      "reflect": false
    },
    "min": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The minimum value, which must not be greater than its maximum (max attribute) value."
      },
      "attribute": "min",
      "reflect": false
    },
    "minlength": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute\nspecifies the minimum number of characters that the user can enter."
      },
      "attribute": "minlength",
      "reflect": false
    },
    "pattern": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A regular expression that the value is checked against. The pattern must match the entire value, not just some\nsubset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value\nof the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, or `\"password\"`, otherwise it is ignored."
      },
      "attribute": "pattern",
      "reflect": false
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string | null",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Instructional text that shows before the input has a value."
      },
      "attribute": "placeholder",
      "reflect": false
    }
  }; }
  static get events() { return [{
      "method": "neftifyBlur",
      "name": "neftifyBlur",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      }
    }, {
      "method": "neftifyFocus",
      "name": "neftifyFocus",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      }
    }, {
      "method": "neftifyChange",
      "name": "neftifyChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      }
    }, {
      "method": "neftifyInput",
      "name": "neftifyInput",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      }
    }, {
      "method": "neftifyKeyDown",
      "name": "neftifyKeyDown",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      }
    }, {
      "method": "neftifyKeyUp",
      "name": "neftifyKeyUp",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "void",
        "resolved": "void",
        "references": {}
      }
    }]; }
  static get elementRef() { return "el"; }
}
