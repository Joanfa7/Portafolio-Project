import { IconnectionDetails } from "./connect-wallet.types";
interface IWalletProvider {
  name: string;
  id: string;
  logo: any;
}
export declare class NeftifyConnectWallet {
  providers: IWalletProvider[];
  /** Host element */
  el: HTMLElement;
  modalEl: HTMLNeftifyModalElement;
  buttonEl: HTMLNeftifyButtonElement;
  selectedWalletProvider: string;
  connectionDetails: IconnectionDetails;
  /** Used for managing the UI of the connect button */
  hasConnected: boolean;
  /** Shows the emoji of the connected button */
  showEmoji: boolean;
  /** Hides the neftify button and modal components */
  isHidden: boolean;
  /** Prevents the modal from opening up, the connect button gets triggered via custom connection on `neftifyConnectButtonClick` */
  noModal: boolean;
  /** Enables the dark-mode theme */
  isDark: boolean;
  /**
   * Gets fired whenever the user has connected their wallet
   */
  private neftifyUserHasConnected;
  /**
   * Gets fired whenever the user has clicked on the connect button
   */
  private neftifyConnectButtonClick;
  /**
   * Gets fired whenever the user has clicked on the disconnect button
   */
  private neftifyDisconnectButtonClick;
  /**
   * Gets fired whenever the user has disconnected their wallet
   */
  private neftifyUserHasDisconnected;
  onEscPress(event: any): void;
  /**
   * Hides the connection modal
   * @return {void}
   * */
  closeModal: () => Promise<void>;
  /**
   * Handles the user connection and stores the connection details on local storage.
   * @param {IconnectionDetails} response
   * @param {string} selectedWalletProvider
   * @return {void}
   * */
  handleUserConnect(response: IconnectionDetails, selectedWalletProvider: string): void;
  /**
   * Saves the connection details to local storage for future interactions.
   * @param {IconnectionDetails} connectionDetails
   * @param {string} selectedWalletProvider
   */
  setStorageData: (connectionDetails: IconnectionDetails, selectedWalletProvider: string) => void;
  /**
   * Gets the connection details from local storage
   * @return {Object}
   */
  getStorageData: () => any;
  /**
   * Clears the connection details from local storage
   * @return {void}
   */
  clearConnectionData: () => void;
  /**
   * Used to set connection details using local storage as reference
   * @return {void}
   */
  setConnectionDetails: () => Promise<void>;
  getConnectionDetails(): Promise<IconnectionDetails>;
  /**
   * Helper method allowing to execute a manual wallet connection
   * @param {`metamask` | `walletconnect`} provider The provider to connect with `metamask` | `walletconnect`
   */
  connect(provider: any): Promise<void>;
  /**
   * Helper method allowing to execute a manual wallet disconnection
   */
  disconnect(): Promise<void>;
  /**
   * Helper method to get the user's balance in wei
   */
  getBalance(): Promise<{
    wei: string;
    eth: string;
  }>;
  /**
   * Helper method to get the contract signer
   */
  getSigner(): Promise<any>;
  /**
   * Helper method to get the user's connection state.
   * @return {boolean} Returns `true` if user is connected, otherwise returns `false`.
   */
  userIsConnected(): Promise<boolean>;
  componentWillLoad(): Promise<void>;
  render(): any;
}
export {};
