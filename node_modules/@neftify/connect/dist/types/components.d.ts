/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { IconnectionDetails } from "./components/connect-wallet/connect-wallet.types";
export namespace Components {
    interface NeftifyButton {
    }
    interface NeftifyConnectWallet {
        /**
          * Helper method allowing to execute a manual wallet connection
          * @param provider The provider to connect with `metamask` | `walletconnect`
         */
        "connect": (provider: any) => Promise<void>;
        /**
          * Helper method allowing to execute a manual wallet disconnection
         */
        "disconnect": () => Promise<void>;
        /**
          * Helper method to get the user's balance in wei
         */
        "getBalance": () => Promise<{ wei: string; eth: string; }>;
        "getConnectionDetails": () => Promise<IconnectionDetails>;
        /**
          * Helper method to get the contract signer
         */
        "getSigner": () => Promise<any>;
        /**
          * Enables the dark-mode theme
         */
        "isDark": boolean;
        /**
          * Hides the neftify button and modal components
         */
        "isHidden": boolean;
        /**
          * Prevents the modal from opening up, the connect button gets triggered via custom connection on `neftifyConnectButtonClick`
         */
        "noModal": boolean;
        /**
          * Shows the emoji of the connected button
         */
        "showEmoji": boolean;
        /**
          * Helper method to get the user's connection state.
          * @return Returns `true` if user is connected, otherwise returns `false`.
         */
        "userIsConnected": () => Promise<boolean>;
    }
    interface NeftifyInput {
        /**
          * Set if the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * A hint to the browser for which keyboard to display. This attribute applies when the value of the type attribute is `"text"`, `"password"`, `"email"`, or `"url"`. Possible values are: `"verbatim"`, `"latin"`, `"latin-name"`, `"latin-prose"`, `"full-width-latin"`, `"kana"`, `"katakana"`, `"numeric"`, `"tel"`, `"email"`, `"url"`.
         */
        "inputmode"?: string;
        /**
          * Removes the background, border, shadow, and horizontal padding
         */
        "isStatic": boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * The input will look similar to a normal one, but is not editable
         */
        "readonly": boolean;
        /**
          * Set if the user must fill in a value before submitting a form. Input state must be set back after.
         */
        "required": boolean;
        /**
          * Size
         */
        "size": "small" | "normal" | "medium" | "large";
        /**
          * Set if the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * Type
         */
        "type": "text" | "number" | "email" | "password";
        /**
          * Value
         */
        "value": string | number;
    }
    interface NeftifyModal {
        /**
          * Allows dismissing the modal by clicking on the backdrop
         */
        "dismissOnBackdropClick": boolean;
        "heading": string;
        /**
          * Hides the modal component
         */
        "hideModal": () => Promise<void>;
        /**
          * Determines if the modal should be visible
         */
        "isVisible": boolean;
        /**
          * Shows the modal component and disables scroll
         */
        "showModal": () => Promise<void>;
    }
}
export interface NeftifyConnectWalletCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNeftifyConnectWalletElement;
}
export interface NeftifyInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNeftifyInputElement;
}
export interface NeftifyModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNeftifyModalElement;
}
declare global {
    interface HTMLNeftifyButtonElement extends Components.NeftifyButton, HTMLStencilElement {
    }
    var HTMLNeftifyButtonElement: {
        prototype: HTMLNeftifyButtonElement;
        new (): HTMLNeftifyButtonElement;
    };
    interface HTMLNeftifyConnectWalletElement extends Components.NeftifyConnectWallet, HTMLStencilElement {
    }
    var HTMLNeftifyConnectWalletElement: {
        prototype: HTMLNeftifyConnectWalletElement;
        new (): HTMLNeftifyConnectWalletElement;
    };
    interface HTMLNeftifyInputElement extends Components.NeftifyInput, HTMLStencilElement {
    }
    var HTMLNeftifyInputElement: {
        prototype: HTMLNeftifyInputElement;
        new (): HTMLNeftifyInputElement;
    };
    interface HTMLNeftifyModalElement extends Components.NeftifyModal, HTMLStencilElement {
    }
    var HTMLNeftifyModalElement: {
        prototype: HTMLNeftifyModalElement;
        new (): HTMLNeftifyModalElement;
    };
    interface HTMLElementTagNameMap {
        "neftify-button": HTMLNeftifyButtonElement;
        "neftify-connect-wallet": HTMLNeftifyConnectWalletElement;
        "neftify-input": HTMLNeftifyInputElement;
        "neftify-modal": HTMLNeftifyModalElement;
    }
}
declare namespace LocalJSX {
    interface NeftifyButton {
    }
    interface NeftifyConnectWallet {
        /**
          * Enables the dark-mode theme
         */
        "isDark"?: boolean;
        /**
          * Hides the neftify button and modal components
         */
        "isHidden"?: boolean;
        /**
          * Prevents the modal from opening up, the connect button gets triggered via custom connection on `neftifyConnectButtonClick`
         */
        "noModal"?: boolean;
        /**
          * Gets fired whenever the user has clicked on the connect button
         */
        "onNeftifyConnectButtonClick"?: (event: NeftifyConnectWalletCustomEvent<any>) => void;
        /**
          * Gets fired whenever the user has clicked on the disconnect button
         */
        "onNeftifyDisconnectButtonClick"?: (event: NeftifyConnectWalletCustomEvent<any>) => void;
        /**
          * Gets fired whenever the user has connected their wallet
         */
        "onNeftifyUserHasConnected"?: (event: NeftifyConnectWalletCustomEvent<any>) => void;
        /**
          * Gets fired whenever the user has disconnected their wallet
         */
        "onNeftifyUserHasDisconnected"?: (event: NeftifyConnectWalletCustomEvent<any>) => void;
        /**
          * Shows the emoji of the connected button
         */
        "showEmoji"?: boolean;
    }
    interface NeftifyInput {
        /**
          * Set if the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. This attribute applies when the value of the type attribute is `"text"`, `"password"`, `"email"`, or `"url"`. Possible values are: `"verbatim"`, `"latin"`, `"latin-name"`, `"latin-prose"`, `"full-width-latin"`, `"kana"`, `"katakana"`, `"numeric"`, `"tel"`, `"email"`, `"url"`.
         */
        "inputmode"?: string;
        /**
          * Removes the background, border, shadow, and horizontal padding
         */
        "isStatic"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        "onNeftifyBlur"?: (event: NeftifyInputCustomEvent<void>) => void;
        "onNeftifyChange"?: (event: NeftifyInputCustomEvent<void>) => void;
        "onNeftifyFocus"?: (event: NeftifyInputCustomEvent<void>) => void;
        "onNeftifyInput"?: (event: NeftifyInputCustomEvent<void>) => void;
        "onNeftifyKeyDown"?: (event: NeftifyInputCustomEvent<void>) => void;
        "onNeftifyKeyUp"?: (event: NeftifyInputCustomEvent<void>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * The input will look similar to a normal one, but is not editable
         */
        "readonly"?: boolean;
        /**
          * Set if the user must fill in a value before submitting a form. Input state must be set back after.
         */
        "required"?: boolean;
        /**
          * Size
         */
        "size"?: "small" | "normal" | "medium" | "large";
        /**
          * Set if the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * Type
         */
        "type"?: "text" | "number" | "email" | "password";
        /**
          * Value
         */
        "value"?: string | number;
    }
    interface NeftifyModal {
        /**
          * Allows dismissing the modal by clicking on the backdrop
         */
        "dismissOnBackdropClick"?: boolean;
        "heading"?: string;
        /**
          * Determines if the modal should be visible
         */
        "isVisible"?: boolean;
        /**
          * Gets fired whenever the default cancel button is clicked
         */
        "onCancel"?: (event: NeftifyModalCustomEvent<any>) => void;
        /**
          * Gets fired whenever the default ok button is clicked
         */
        "onOk"?: (event: NeftifyModalCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "neftify-button": NeftifyButton;
        "neftify-connect-wallet": NeftifyConnectWallet;
        "neftify-input": NeftifyInput;
        "neftify-modal": NeftifyModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "neftify-button": LocalJSX.NeftifyButton & JSXBase.HTMLAttributes<HTMLNeftifyButtonElement>;
            "neftify-connect-wallet": LocalJSX.NeftifyConnectWallet & JSXBase.HTMLAttributes<HTMLNeftifyConnectWalletElement>;
            "neftify-input": LocalJSX.NeftifyInput & JSXBase.HTMLAttributes<HTMLNeftifyInputElement>;
            "neftify-modal": LocalJSX.NeftifyModal & JSXBase.HTMLAttributes<HTMLNeftifyModalElement>;
        }
    }
}
